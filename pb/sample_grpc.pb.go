// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: pb/sample.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MongoDBService_FetchDataFromMongoDB_FullMethodName      = "/pb.MongoDBService/FetchDataFromMongoDB"
	MongoDBService_FetchDataBatchFromMongoDB_FullMethodName = "/pb.MongoDBService/FetchDataBatchFromMongoDB"
)

// MongoDBServiceClient is the client API for MongoDBService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MongoDBServiceClient interface {
	FetchDataFromMongoDB(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (*FetchResponse, error)
	FetchDataBatchFromMongoDB(ctx context.Context, in *BatchFetchRequest, opts ...grpc.CallOption) (*BatchFetchResponse, error)
}

type mongoDBServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMongoDBServiceClient(cc grpc.ClientConnInterface) MongoDBServiceClient {
	return &mongoDBServiceClient{cc}
}

func (c *mongoDBServiceClient) FetchDataFromMongoDB(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (*FetchResponse, error) {
	out := new(FetchResponse)
	err := c.cc.Invoke(ctx, MongoDBService_FetchDataFromMongoDB_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoDBServiceClient) FetchDataBatchFromMongoDB(ctx context.Context, in *BatchFetchRequest, opts ...grpc.CallOption) (*BatchFetchResponse, error) {
	out := new(BatchFetchResponse)
	err := c.cc.Invoke(ctx, MongoDBService_FetchDataBatchFromMongoDB_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MongoDBServiceServer is the server API for MongoDBService service.
// All implementations must embed UnimplementedMongoDBServiceServer
// for forward compatibility
type MongoDBServiceServer interface {
	FetchDataFromMongoDB(context.Context, *FetchRequest) (*FetchResponse, error)
	FetchDataBatchFromMongoDB(context.Context, *BatchFetchRequest) (*BatchFetchResponse, error)
	mustEmbedUnimplementedMongoDBServiceServer()
}

// UnimplementedMongoDBServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMongoDBServiceServer struct {
}

func (UnimplementedMongoDBServiceServer) FetchDataFromMongoDB(context.Context, *FetchRequest) (*FetchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchDataFromMongoDB not implemented")
}
func (UnimplementedMongoDBServiceServer) FetchDataBatchFromMongoDB(context.Context, *BatchFetchRequest) (*BatchFetchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchDataBatchFromMongoDB not implemented")
}
func (UnimplementedMongoDBServiceServer) mustEmbedUnimplementedMongoDBServiceServer() {}

// UnsafeMongoDBServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MongoDBServiceServer will
// result in compilation errors.
type UnsafeMongoDBServiceServer interface {
	mustEmbedUnimplementedMongoDBServiceServer()
}

func RegisterMongoDBServiceServer(s grpc.ServiceRegistrar, srv MongoDBServiceServer) {
	s.RegisterService(&MongoDBService_ServiceDesc, srv)
}

func _MongoDBService_FetchDataFromMongoDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoDBServiceServer).FetchDataFromMongoDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MongoDBService_FetchDataFromMongoDB_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoDBServiceServer).FetchDataFromMongoDB(ctx, req.(*FetchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoDBService_FetchDataBatchFromMongoDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchFetchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoDBServiceServer).FetchDataBatchFromMongoDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MongoDBService_FetchDataBatchFromMongoDB_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoDBServiceServer).FetchDataBatchFromMongoDB(ctx, req.(*BatchFetchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MongoDBService_ServiceDesc is the grpc.ServiceDesc for MongoDBService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MongoDBService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.MongoDBService",
	HandlerType: (*MongoDBServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchDataFromMongoDB",
			Handler:    _MongoDBService_FetchDataFromMongoDB_Handler,
		},
		{
			MethodName: "FetchDataBatchFromMongoDB",
			Handler:    _MongoDBService_FetchDataBatchFromMongoDB_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/sample.proto",
}
